digraph fsm {
    rankdir=LR;

    node [fontname="monospace", fontsize = 14, height = 1.5, width = 1.5]
    edge [fontname="monospace", fontsize = 14]
    
    // Nodes definition
    node [shape = circle] Start;
    
    node [shape = doublecircle] Identifier;
    node [shape = doublecircle] Var_prefix;
    node [shape = doublecircle] Type_prefix;

    node [shape = doublecircle] End_closing;

    node [shape = doublecircle] Assign;
    node [shape = circle] Eq_in;
    node [shape = doublecircle] Eq_end;
    node [shape = circle] Noteq_begin;
    node [shape = circle] Noteq_in;
    node [shape = doublecircle] Noteq_end;
    
    node [shape = doublecircle] Concat;
    
    node [shape = doublecircle] Smaller;
    node [shape = doublecircle] Larger;
    node [shape = doublecircle] Smaller_eq;
    node [shape = doublecircle] Larger_eq;

    node [shape = doublecircle] Plus;
    node [shape = doublecircle] Minus;
    node [shape = doublecircle] Mul;
    
    node [shape = doublecircle] Div;
    
    node [shape = circle] Comment_l_in;
    node [shape = doublecircle] Comment_l_end;
    node [shape = circle] Comment_b_in;
    node [shape = circle] Comment_b_end_1;
    node [shape = doublecircle] Comment_b_end_2;
    
    node [shape = circle] String_begin;
    node [shape = circle] String_in;
    node [shape = doublecircle] String_end;
    node [shape = circle] String_esc;
    
    node [shape = doublecircle] Int_in;
    node [shape = circle] Float_begin;
    node [shape = doublecircle] Float_in;
    node [shape = circle] Exp_begin;
    node [shape = circle] Exp_sign;
    node [shape = doublecircle] Exp_in;
    
    node [shape = doublecircle] L_r_par;
    node [shape = doublecircle] R_r_par;
    node [shape = doublecircle] L_c_par;
    node [shape = doublecircle] R_c_par;
    
    node [shape = doublecircle] Whitespace;
    
    node [shape = doublecircle] Semicolon;
    
    // Identifier
    Start -> Identifier [label="  _, a-z, A-Z  "];
    Identifier -> Identifier [label="  _, 0-9, a-z, A-Z  "];
    
    // Var and type prefixes
    Start -> Var_prefix [label="$"];
    Start -> Type_prefix [label="?"];
    
    // Optional closing sign
    Type_prefix -> End_closing [label=">"]
    
    // String
    Start -> String_begin [label="\""];
    String_begin -> String_in [label="ASCII>31-{\"}"];
    String_in -> String_end [label="\""];
    String_in -> String_esc [label="\\"];
    String_in -> String_in [label="ASCII>31-{\"}"];
    String_esc -> String_in [label="ASCII>31"];
    String_begin -> String_end [label="\""];
    
    // Numbers
    Start -> Int_in [label = "0-9"];
    // Int
    Int_in -> Int_in [label = "0-9"];
    // Float
    Int_in -> Float_begin [label = "."];
    Float_begin -> Float_in [label = "0-9"];
    Float_in -> Float_in [label = "0-9"];
    // Int->Exp
    Int_in -> Exp_begin [label = "e, E"];
    Exp_begin -> Exp_sign [label = "+, -"];
    Exp_begin -> Exp_in [label = "0-9"];
    Exp_sign -> Exp_in [label = "0-9"];
    Exp_in -> Exp_in [label = "0-9"];
    // Float->Exp
    Float_in -> Exp_begin [label = "e, E"];

    // Operators
    Assign -> Eq_in [label = "="];
    Eq_in -> Eq_end [label = "="];
    Start -> Noteq_begin [label = "!"];
    Noteq_begin -> Noteq_in [label = "="];
    Noteq_in -> Noteq_end [label = "="];

    Start -> Concat [label = "."];

    Start -> Smaller [label = "<"];
    Start -> Larger [label = ">"];
    Smaller -> Smaller_eq [label = "="];
    Larger -> Larger_eq [label = "="];

    Start -> Plus [label = "+"];
    Start -> Minus [label = "-"];
    Start -> Mul [label = "*"];
    Start -> Assign [label = "="];
    
    Start -> Div [label = "/"];

    // Comments
    // Line
    Div -> Comment_l_in [label = "\/"];
    Comment_l_in -> Comment_l_in [label = "ASCII-{\\n, EOF}"];
    Comment_l_in -> Comment_l_end [label = "\\n, EOF"];
    // Block
    Div -> Comment_b_in [label = "*"];
    Comment_b_in -> Comment_b_in [label = "ASCII-{*}"];
    Comment_b_in -> Comment_b_end_1 [label = "*"];
    Comment_b_end_1 -> Comment_b_in [label = "ASCII-{/}"];
    Comment_b_end_1 -> Comment_b_end_2 [label = "/"];
    
    // Parantheses
    // Round
    Start -> L_r_par [label = "("];
    Start -> R_r_par [label = ")"];
    // Curly
    Start -> L_c_par [label = "{"];
    Start -> R_c_par [label = "}"];
    
    // Whitespace
    Start -> Whitespace [label = "(space)"];
    
    // Semicolon
    Start -> Semicolon [label = ";"];
}
